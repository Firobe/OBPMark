
std::string kernel_code = 
"void kernel image_offset_correlation_gain_correction(global const int *image_input,global const int *correlation_table,global const int *gain_correlation_map, global int *processing_image, const int size_image)\n"
"{\n"
"unsigned int x = get_global_id(0);\n"
"if (x < size_image)\n"
"{\n"
"processing_image[x] =(image_input[x] - correlation_table[x]) * gain_correlation_map[x];\n"
"}\n"
"}\n"
"void kernel bad_pixel_correlation(global int *processing_image,global int *processing_image_error_free, global const bool *bad_pixel_map, const unsigned int w_size ,const unsigned int h_size)\n"
"{\n"
"unsigned int x =  get_global_id(0);\n"
"unsigned int y =  get_global_id(1);\n"
"if (x < w_size && y < h_size )\n"
"{\n"
"if (bad_pixel_map[y * h_size + x])\n"
"{\n"
"if (x == 0 && y == 0)\n"
"{\n"
"// TOP left\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[y * h_size +  (x +1)] + processing_image[(y +1) * h_size +  (x +1) ] + processing_image[(y +1) * h_size + x  ])/3;\n"
"}\n"
"else if (x == 0 && y == h_size)\n"
"{\n"
"// Top right\n"
"processing_image_error_free[y * h_size + x] = (processing_image[y * h_size +  (x -1)] + processing_image[(y -1) * h_size +  (x -1)] + processing_image[(y -1) * h_size + x ])/3;\n"
"}\n"
"else if(x == w_size && y == 0)\n"
"{\n"
"//Bottom left\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[(y -1) * h_size +  x] + processing_image[(y -1) * h_size +  (x + 1)] + processing_image[y * h_size +  (x +1)])/3;\n"
"}\n"
"else if (x == w_size && y == h_size)\n"
"{\n"
"// Bottom right\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[(y -1) * h_size +  (x -1)] + processing_image[(y -1) * h_size +  x ] + processing_image[y * h_size +  (x -1)])/3;\n"
"}\n"
"else if (y == 0)\n"
"{\n"
"// Top Edge\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[y * h_size +  (x -1) ] + processing_image[y * h_size +  (x +1) ] + processing_image[(y +1) * h_size +  x ])/3;\n"
"}\n"
"else if (x == 0)\n"
"{\n"
"//  Left Edge\n"
"processing_image_error_free[y * h_size + x] = (processing_image[(y -1) * h_size +  x ] + processing_image[y * h_size +  (x +1) ] + processing_image[(y +1) * h_size +  x ])/3;\n"
"}\n"
"else if (x == w_size)\n"
"{\n"
"//  Right Edge\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[(y -1) * h_size +  x ] + processing_image[y * h_size +  (x -1) ] + processing_image[(y +1) * h_size +  x ])/3;\n"
"}\n"
"else if (y == h_size)\n"
"{\n"
"// Bottom Edge\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[(y -1) * h_size +  x ] + processing_image[y * h_size +  (x -1) ] + processing_image[y * h_size +  (x +1)])/3;\n"
"}\n"
"else\n"
"{\n"
"// Standart Case\n"
"processing_image_error_free[y * h_size + x ] = (processing_image[y * h_size +  (x -1)] + processing_image[y * h_size +  (x -1) ] + processing_image[(y +1) * h_size +  x  ] +  processing_image[(y +1) * h_size +  x  ])/4;\n"
"}\n"
"}\n"
"else{\n"
"processing_image_error_free[y * h_size + x ] = processing_image[y * h_size + x];\n"
"}\n"
"}\n"
"}\n"
"void kernel spatial_binning_temporal_binning(global const int *processing_image,global int *output_image, const unsigned int w_size_half ,const unsigned int h_size_half)\n"
"{\n"
"unsigned int x =  get_global_id(0);\n"
"unsigned int y =  get_global_id(1);\n"
"if (x < w_size_half && y < h_size_half )\n"
"{\n"
"output_image[y * h_size_half + x ] += processing_image[ (2*y)* (h_size_half*2) + (2 *x) ] + processing_image[(2*y)* (h_size_half*2) + (2 *(x+1))  ] + processing_image[(2*(y+1))* (h_size_half*2) + (2 *x) ] + processing_image[(2*(y+1))* (h_size_half*2) + (2 *(x+1)) ];\n"
"}\n"
"}\n"
;
