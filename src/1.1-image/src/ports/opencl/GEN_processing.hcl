
std::string kernel_code = 
"// NOTE: in opencl the implementation of the uint16/uint32 ar not fully working and we need to use the c like types\n"
"// so uint16_t will be switch to unsigned short\n"
"// and uint32_t  will be switch to unsigned int\n"
"void kernel\n"
"f_offset(\n"
"global unsigned short *frame,\n"
"const int i,\n"
"global const unsigned short *offsets,\n"
"const int size\n"
")\n"
"{\n"
"unsigned short *frame_i;\n"
"frame_i = frame + (size * i);\n"
"unsigned int x = get_global_id(0);\n"
"if (x < size)\n"
"{\n"
"frame_i[x] = frame_i[x] - offsets[x];\n"
"}\n"
"}\n"
"void kernel\n"
"f_mask_replace(\n"
"global unsigned short *frame,\n"
"const int i,\n"
"global const unsigned char *mask,\n"
"const unsigned int width,\n"
"const unsigned int height\n"
")\n"
"{\n"
"int x = get_global_id(0);\n"
"int y = get_global_id(1);\n"
"const int kernel_rad = 1;\n"
"unsigned int n_sum = 0;\n"
"unsigned int sum = 0;\n"
"unsigned short *frame_i;\n"
"frame_i = frame + (width * height  * i);\n"
"if (x < width && y < height)\n"
"{\n"
"if (mask[y* width + x] == 1)\n"
"{\n"
"for(int i = -kernel_rad; i <= kernel_rad; ++i) // loop over kernel_rad  -1 to 1 in kernel_size 3\n"
"{\n"
"for(int j = -kernel_rad; j <= kernel_rad; ++j){\n"
"if (!((i + x < 0 || j + y < 0) || ( i + x > height - 1 || j + y > width - 1)))\n"
"{\n"
"//printf(\"POS s x %d y %d value %d\\n\", y + j, x + i, (y + j)* width + (x + i));\n"
"if ( mask[(y + j)* width + (x + i)] == 0)\n"
"{\n"
"sum += frame_i[(y + j)*width+(x + i)];\n"
"++n_sum;\n"
"}\n"
"}\n"
"}\n"
"}\n"
"frame_i[y * width + x] = (unsigned short)(n_sum == 0 ? 0 : sum / n_sum);\n"
"}\n"
"//printf(\"POS s x %d y %d value %d\\n\", threadIdx.x, threadIdx.y, frame[y * width + x]);\n"
"}\n"
"}\n"
"void kernel\n"
"f_scrub(\n"
"global unsigned short *frame,\n"
"const unsigned int frame_i,\n"
"const unsigned int frame_i_0,\n"
"const unsigned int frame_i_1,\n"
"const unsigned int frame_i_2,\n"
"const unsigned int frame_i_3,\n"
"const unsigned int width,\n"
"const unsigned int height\n"
")\n"
"{\n"
"const unsigned int num_neighbour = 4;\n"
"unsigned int sum;\n"
"unsigned int mean;\n"
"unsigned int thr;\n"
"unsigned short *frame_0;\n"
"unsigned short *frame_1;\n"
"unsigned short *frame_2;\n"
"unsigned short *frame_3;\n"
"unsigned short *frame_i_point;\n"
"int x = get_global_id(0);\n"
"int y = get_global_id(1);\n"
"if (x < width && y < height)\n"
"{\n"
"/* Init Frames position */\n"
"frame_0 = frame + ((height * width) * frame_i_0);\n"
"frame_1 = frame + ((height * width) * frame_i_1);\n"
"frame_2 = frame + ((height * width) * frame_i_2);\n"
"frame_3 = frame + ((height * width) * frame_i_3);\n"
"frame_i_point = frame + ((height * width) * frame_i);\n"
"sum = (unsigned short)frame_0[y * width + x] + (unsigned short)frame_1[y * width + x] + (unsigned short)frame_2[y * width + x] + (unsigned short)frame_3[y * width + x];\n"
"/* Calculate mean and threshold */\n"
"mean = sum / (num_neighbour);\n"
"thr = 2*mean;\n"
"/* If above threshold, replace with mean of temporal neighbours */\n"
"if (frame_i_point[y * width + x] > thr)\n"
"{\n"
"// NOTE: in opencl the implementation of the uint16/uint32 ar not fully working and we need to use the c like types\n"
"// so uint16_t will be switch to unsigned short\n"
"// and uint32_t  will be switch to unsigned int\n"
"frame_i_point[y * width + x] = (unsigned short)mean;\n"
"}\n"
"}\n"
"}\n"
"void kernel\n"
"f_gain(\n"
"global unsigned short *frame,\n"
"const unsigned int i,\n"
"global unsigned short *gains,\n"
"const unsigned int size,\n"
"const unsigned int width,\n"
"const unsigned int height\n"
")\n"
"{\n"
"unsigned short *frame_i;\n"
"int x = get_global_id(0);\n"
"frame_i = frame + ((height * width) * i);\n"
"if (x < size)\n"
"{\n"
"// NOTE: in opencl the implementation of the uint16/uint32 ar not fully working and we need to use the c like types\n"
"// so uint16_t will be switch to unsigned short\n"
"// and uint32_t  will be switch to unsigned int\n"
"frame_i[x] = (unsigned short)((unsigned int)frame_i[x] * (unsigned int)gains[x] >> 16 );\n"
"}\n"
"}\n"
"void kernel\n"
"f_2x2_bin_coadd(\n"
"global unsigned short *frame,\n"
"const unsigned int i_frame,\n"
"global unsigned int *sum_frame,\n"
"const unsigned int width,\n"
"const unsigned int height,\n"
"const unsigned int lateral_stride\n"
")\n"
"{\n"
"const unsigned int stride = 2;\n"
"unsigned int sum = 0;\n"
"unsigned short *frame_i;\n"
"int i = get_global_id(0);\n"
"int j = get_global_id(1);\n"
"frame_i = frame + (height * 2 * width * 2 * i_frame);\n"
"if (i < width && j < height){\n"
"#pragma unroll\n"
"for(unsigned int x = 0; x < stride; ++x)\n"
"{\n"
"#pragma unroll\n"
"for(unsigned int y = 0; y < stride; ++y)\n"
"{\n"
"// NOTE: in opencl the implementation of the uint16/uint32 ar not fully working and we need to use the c like types\n"
"// so uint16_t will be switch to unsigned short\n"
"// and uint32_t  will be switch to unsigned int\n"
"sum +=  (unsigned short)frame_i[((j * stride) + x) * (width * stride) + ((i*stride) +y)];\n"
"}\n"
"}\n"
"sum_frame[j * lateral_stride + i ]= sum + sum_frame[j * lateral_stride + i ];\n"
"}\n"
"}\n"
;
